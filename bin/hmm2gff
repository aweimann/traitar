#!/usr/bin/env python
from traitar.PhenotypeCollection import PhenotypeCollection
from traitar.hmm2gff import run
if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser("map features contributing to the classfication back to the functional annotation and gene prediction")
    parser.add_argument("input_hmm", help= 'input HMMer file')
    parser.add_argument("output_gff_dir", help= 'output GFF file')
    parser.add_argument("sample", help= 'sample file')
    parser.add_argument("model_tar", help = "tar.gz file with relevant features etc.")
    parser.add_argument("predicted_pts", help='phenotypes that were predicted for the given samples')
    parser.add_argument("--gene_gff", help= "gene prediction track", default = None)
    parser.add_argument("--gene_gff_type", choices = ["img", "prodigal", "ncbi", "refseq", "metagenemark", "genbank"], help= "origin of the gene prediction (Prodigal, NCBI, metagenemark)", default = None)
    args = parser.parse_args()
    pt_models =  PhenotypeCollection(args.model_tar)
    run(args.input_hmm, args.output_gff_dir, args.gene_gff, args.sample, args.gene_gff_type,  pt_models, args.predicted_pts)
